package dev.abel.springbootredis.repository;

import dev.abel.springbootredis.domain.Player;
import dev.abel.springbootredis.domain.Roullete;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Repository;

import javax.annotation.PostConstruct;

import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

@Repository
public class RoulleteRepository implements RedisRepository {
    private static final String KEY = "Roullete";

    private RedisTemplate<String, Roullete> redisTemplate;
    private HashOperations hashOperations;

    public RoulleteRepository(RedisTemplate<String, Roullete> redisTemplate) {
        this.redisTemplate = redisTemplate;
    }

    @PostConstruct
    private void init() {
        hashOperations = redisTemplate.opsForHash();
    }

    @Override
    public Map<String, Roullete> findAll() {
        return hashOperations.entries(KEY);
    }

    @Override
    public Roullete findById(String id) {
        return (Roullete) hashOperations.get(KEY, id);
    }

    @Override
    public void save(Roullete roullete) {
        hashOperations.put(KEY, UUID.randomUUID().toString(), roullete);
    }

    @Override
    public void delete(String id) {
        hashOperations.delete(KEY, id);
    }
    
    @Override
	public Set getId(Roullete roullete) {
		// TODO Auto-generated method stub
		return hashOperations.keys(roullete);
	}

	//@Override
	//public String getId(Roullete roullete) {
		//return roullete.getId();
	//}
	
	
	//only roullete repositories
	
	public void addPlayer(String idRoullete, String playerID, String playerBet, double betValue) {
		Player player = new Player(playerID,playerBet,betValue);
		findById(idRoullete).addPlayers(player);
	}
	
	public void changeStatus(String idRoullete, int status) {
		findById(idRoullete).setStatus(status);
		
	}
	
	public void restartRoullete(String idRoullete) {
		findById(idRoullete).setResult(0);
		findById(idRoullete).errasePlayers();
		findById(idRoullete).setStatus(0);
	}
	
	public int giveStatus(String idRoullete) {
		return findById(idRoullete).getStatus();
	}
	
	public void playRoullete(String idRoullete) {
		int result = (int) Math.floor(Math.random()*(36+1));
		findById(idRoullete).setResult(result);	
	}
	
	public void setPlayersProfit(String idRoullete,int result) {
		ArrayList<Player> players = findById(idRoullete).getPlayers();
		for(int i = 0; i < players.size( ); i++) {
			 Player actual = players.get(i);
			 if(actual.getBet().equalsIgnoreCase("Rojo") || actual.getBet().equalsIgnoreCase("Negro") ) {
				 setColorProfit(actual,result);
			 }else {
				 setNumberProfit(actual,result);
			 }
		}
	}
	
	public void setNumberProfit(Player actual,int result) {
		if(Integer.parseInt(actual.getBet()) == result) {
			double profit = 5*actual.getMoney();
			actual.setMoney(profit);
		}else {
			double loss = 0;
			actual.setMoney(loss);
		}
	}
	
	public void setColorProfit(Player actual,int result) {
		if(actual.getBet().equalsIgnoreCase("Rojo") || actual.getBet().equalsIgnoreCase("Negro") ) {
			 if(result%2==0 || actual.getBet().equalsIgnoreCase("Rojo")) {
				 double profit = actual.getMoney()*1.8;
				 actual.setMoney(profit);
			 }else if(result%2==0 || actual.getBet().equalsIgnoreCase("Negro")){
				 double loss = 0;
				 actual.setMoney(loss);
			 }
			 else if(result%2!=0 || actual.getBet().equalsIgnoreCase("Rojo")){
				 double loss = 0;
				 actual.setMoney(loss);
			 }else if(result%2!=0 || actual.getBet().equalsIgnoreCase("Negro")){
				 double profit = actual.getMoney()*1.8;
				 actual.setMoney(profit);
			 }
		 }
		
	}
	
	public ArrayList<Player> givePlayers(String idRoullete) {
		return findById(idRoullete).getPlayers();
	}

}
